# Orb 'circleci/circleci-cli@0.1.7' resolved to 'circleci/circleci-cli@0.1.7'
#Putting in this comment to trigger recommit on Server

version: 2
jobs:
  context-cli-test:
    docker:
    - image: cimg/base:stable
      environment:
        VCS: github
    steps:
    - checkout
    - run:
        command: |
          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          # grab CircleCI CLI version
          if [[ "latest" == "latest" ]]; then
            # extract latest version from GitHub releases API
            CIRCLECI_CLI_VERSION=$(curl \
              --silent --show-error --location --fail --retry 3 \
              https://api.github.com/repos/CircleCI-Public/circleci-cli/releases/latest | \
              jq '.tag_name' | sed -E 's/"//g')
          else
            CIRCLECI_CLI_VERSION=latest
            echo "Selected version of CircleCI CLI is $CIRCLECI_CLI_VERSION"
          fi

          # check if CircleCI CLI needs to be installed
          if command -v circleci > /dev/null 2>&1; then
            if circleci version | grep "${CIRCLECI_CLI_VERSION:1}" > /dev/null 2>&1; then
              echo "circleci $CIRCLECI_CLI_VERSION is already installed"
              exit 0
            else
              echo "A different version of the CircleCI CLI is installed ($(circleci version)); updating it"
              $SUDO rm -f "$(which circleci)"
              HTTP1_1_OPTION=""
              if [ -n "$(curl --help | grep '\-\-http1.1')" ]; then
                HTTP1_1_OPTION="--http1.1"
              fi
              curl -fLSs $HTTP1_1_OPTION https://circle.ci/cli | $SUDO bash
              echo "CircleCI CLI version $(circleci --skip-update-check version) has been installed to $(which circleci)"
            fi
          fi
        name: Install CircleCI CLI
    - run:
        command: |
          circleci setup --no-prompt \
            --host https://circleci.ohalloran.eu \
            --token $CIRCLECI_CLI_TOKEN
        name: Configure CircleCI CLI
    - run:
        name: Check other required vars set
        command: |
          [ -z $VCS ] && exit 1 || echo "VCS set, continuing"
    - run:
        name: List current contexts
        command: |
          circleci context list $VCS $CIRCLE_PROJECT_USERNAME
    - run:
        name: Create test context along with secret in test context, show again for confirmation
        command: |
          bash ./Cloud-Context-CLI-Script
    - run:
        name: List current contexts following running of script
        command: |
          circleci context list $VCS $CIRCLE_PROJECT_USERNAME
workflows:
  version: 2
  example:
    jobs:
    - context-cli-test

# Original config.yml file:
# #Putting in a comment to trigger new commit
# #############
# # Common Defs
# #############
# version: 2.1
# orbs:
#   circleci-cli: circleci/circleci-cli@0.1.7
# 
# ############
# # Workflows
# ############
# workflows:
#   version: 2
#   example:
#     jobs:
#       - context-cli-test
# 
# ##################
# # Job Definitions
# ##################
# jobs:
#   context-cli-test:
#     docker:
#       - image: cimg/base:stable
#         environment:
#           VCS: github
#     steps:
#       - checkout
#       - circleci-cli/install # Installs latest CLI
#       - circleci-cli/setup
#       - run:
#           name: Check other required vars set
#           command: |
#             [ -z $VCS ] && exit 1 || echo \"VCS set, continuing\"
#       - run:
#           name: List current contexts
#           command: |
#             circleci context list $VCS $CIRCLE_PROJECT_USERNAME
#  #     - run:
#  #         name: Create test context, show again for confirmation
#  #         command: |
#  #           circleci context create $VCS $CIRCLE_PROJECT_USERNAME ALICE
#  #           circleci context create $VCS $CIRCLE_PROJECT_USERNAME FOO
#  #           circleci context list $VCS $CIRCLE_PROJECT_USERNAME
#  #     - run:
#  #         name: Show vars in context, should be empty
#  #         command: |
#  #           circleci context show $VCS $CIRCLE_PROJECT_USERNAME ALICE
#  #           circleci context show $VCS $CIRCLE_PROJECT_USERNAME FOO
#       - run: 
#           name: Create test context along with secret in test context, show again for confirmation
#           command: |
#             bash ./Cloud-Context-CLI-Script
#       - run:
#           name: List current contexts following running of script
#           command: |
#             circleci context list $VCS $CIRCLE_PROJECT_USERNAME
#  #     - run:
#  #         name: Create secret in test context, show again for confirmation
#  #         command: |
#  #           echo \"HelloWorld!\" | \\
#  #           circleci context store-secret $VCS $CIRCLE_PROJECT_USERNAME FOO BAR
# 
#  #           circleci context show $VCS $CIRCLE_PROJECT_USERNAME FOO
# #      - run:
# #          name: Remove the secret from the context, show context again to confirm
# #          command: |
# #            circleci context remove-secret $VCS $CIRCLE_PROJECT_USERNAME test-context2 TEST_SECRET
# #            circleci context show $VCS $CIRCLE_PROJECT_USERNAME test-context2
#  #     - run:
#  #         name: Delete test context, show again to confirm
#  #         command: |
#  #           circleci context delete -f $VCS $CIRCLE_PROJECT_USERNAME test-context2
#  #           circleci context list $VCS $CIRCLE_PROJECT_USERNAME
#  #         when: always
